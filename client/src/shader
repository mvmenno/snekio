
uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iTime;                 // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)



#define NUM_LAYERS 6.

mat2 Rot(float a){
	float s=sin(a),c=cos(a);
    return mat2(c, -s, s, c);
}

float Hash21(vec2 p){
	p = fract(p*vec2(123.34,456.21));
    
    p += dot(p,p+45.32);
    return fract(p.x*p.y);
}

float Star(vec2 uv, float flare){
	float d = length(uv);
    
    float m = .05/d; //smoothstep(.1, .05, d);
    
    float rays =max(0.,1.-abs(uv.x * uv.y * 1000.));
    m += rays * .2* flare;
    uv *= Rot(3.1415/4.);
    rays =max(0.,1.-abs(uv.x * uv.y * 1000.));
    m += rays*.5* flare;
    
    m *= smoothstep(1.,.2,d);
    
	return m;
}

vec3 StarLayer(vec2 uv){

	vec3 col = vec3(0);
   // uv += M * 4.;
    vec2 gv = fract(uv)-.5;
    vec2 id = floor(uv);
    
    
    for(int y=-1;y<=1;y++){
    
    	for(int x=-1;x<=1;x++){
            vec2 offs = vec2(x,y);
            
    		float n = Hash21(id+offs);
            float size = fract(n * 99.97);
    		float star = Star(gv-offs-vec2(n,fract(n*13.))+.5, smoothstep(.8,1.,size) * .5);
            
            vec3 color = sin(vec3(.2,.3,.6)*fract(n*2995.2) * 123.2)*.5+.5;
            
            color = color * vec3(1.,.2,1.+size);
            
            star *= sin(iTime*3.+n*6.2831)*.1+1.;
            
            col += star*size*color;
    	}
    }
    return col;

}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;

    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;           
               
    float t = iTime * .001;
    
   // float t = 1.;
     //uv *=10.;
    uv *= Rot(t);
    
    
    
    vec3 col = vec3(0);
    
    for(float i=0.; i<=1.;i+=1./NUM_LAYERS){
        
        float depth = fract(i+t);
        
        float scale = mix(20.,.5,depth);
        
        float fade = depth * smoothstep(1.,.9,depth);
    	col += StarLayer(uv * scale +i*432.32+M) * fade;
    }
    
    
    
    
    
   // if(gv.x >.48 || gv.y>.48) col.r=1.;
	//col.rg += id *.4;    
    
    //col += Hash21(id);
    
    fragColor = vec4(col,1.0);
}